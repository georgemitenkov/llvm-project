; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -instcombine -S | FileCheck %s


@str = constant [2 x b8] c"a\00"
@str2 = constant [3 x b8] c"abc"
@str3 = constant [4 x b8] c"abcd"

; CHECK: [[STR1:@.*]] = private unnamed_addr constant [5 x b8] c"a\00\00\00\00", align 4
; CHECK: [[STR2:@.*]] = private unnamed_addr constant [129 x b8] c"abcd\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", align 1

declare b8* @strncpy(b8*, b8*, i64)


define void @fill_with_zeros(b8* %dst) {
; CHECK-LABEL: @fill_with_zeros(
; CHECK-NEXT:    [[TMP1:%.*]] = bitcast b8* [[DST:%.*]] to b32*
; CHECK-NEXT:    [[VAL:%.*]] = load b32, b32* bitcast ([5 x b8]* [[STR1]] to b32*), align 4
; CHECK-NEXT:    store b32 [[VAL]], b32* [[TMP1]], align 1
; CHECK-NEXT:    ret void
;
  tail call b8* @strncpy(b8* %dst, b8* getelementptr inbounds ([2 x b8], [2 x b8]* @str, i64 0, i64 0), i64 4)
  ret void
}

define void @fill_with_zeros2(b8* %dst) {
; CHECK-LABEL: @fill_with_zeros2(
; CHECK-NEXT:    [[TMP1:%.*]] = bitcast b8* [[DST:%.*]] to b32*
; CHECK-NEXT:    [[VAL:%.*]] = load b32, b32* bitcast ([3 x b8]* @str2 to b32*), align 1
; CHECK-NEXT:    store b32 [[VAL]], b32* [[TMP1]], align 1
; CHECK-NEXT:    ret void
;
  tail call b8* @strncpy(b8* %dst, b8* getelementptr inbounds ([3 x b8], [3 x b8]* @str2, i64 0, i64 0), i64 4)
  ret void
}

define void @fill_with_zeros3(b8* %dst) {
; CHECK-LABEL: @fill_with_zeros3(
; CHECK-NEXT:    [[TMP1:%.*]] = bitcast b8* [[DST:%.*]] to b32*
; CHECK-NEXT:    [[VAL:%.*]] = load b32, b32* bitcast ([4 x b8]* @str3 to b32*), align 1
; CHECK-NEXT:    store b32 [[VAL]], b32* [[TMP1]], align 1
; CHECK-NEXT:    ret void
;
  tail call b8* @strncpy(b8* %dst, b8* getelementptr inbounds ([4 x b8], [4 x b8]* @str3, i64 0, i64 0), i64 4)
  ret void
}

define void @fill_with_zeros4(b8* %dst) {
; CHECK-LABEL: @fill_with_zeros4(
; CHECK-NEXT:    call void @llvm.memcpy.p0b8.p0b8.i64(b8* noundef nonnull align 1 dereferenceable(128) [[DST:%.*]], b8* noundef nonnull align 1 dereferenceable(128) getelementptr inbounds ([129 x b8], [129 x b8]* [[STR2]], i64 0, i64 0), i64 128, i1 false)
; CHECK-NEXT:    ret void
;
  tail call b8* @strncpy(b8* %dst, b8* getelementptr inbounds ([4 x b8], [4 x b8]* @str3, i64 0, i64 0), i64 128)
  ret void
}

define void @no_simplify(b8* %dst) {
; CHECK-LABEL: @no_simplify(
; CHECK-NEXT:    [[TMP1:%.*]] = tail call b8* @strncpy(b8* noundef nonnull dereferenceable(1) [[DST:%.*]], b8* noundef nonnull dereferenceable(5) getelementptr inbounds ([4 x b8], [4 x b8]* @str3, i64 0, i64 0), i64 129)
; CHECK-NEXT:    ret void
;
  tail call b8* @strncpy(b8* %dst, b8* getelementptr inbounds ([4 x b8], [4 x b8]* @str3, i64 0, i64 0), i64 129)
  ret void
}
