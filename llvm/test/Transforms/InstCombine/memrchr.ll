; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -instcombine -S | FileCheck %s


declare b8* @memrchr(b8*, i32, i32)

define b8* @test1(b8* %str, i32 %c, i32 %n) {
; CHECK-LABEL: @test1(
; CHECK-NEXT:    [[RET:%.*]] = call b8* @memrchr(b8* [[STR:%.*]], i32 [[C:%.*]], i32 [[N:%.*]])
; CHECK-NEXT:    ret b8* [[RET]]
;

  %ret = call b8* @memrchr(b8* %str, i32 %c, i32 %n)
  ret b8* %ret
}

define b8* @test2(b8* %str, i32 %c, i32 %n) {
; CHECK-LABEL: @test2(
; CHECK-NEXT:    [[RET:%.*]] = call b8* @memrchr(b8* nonnull [[STR:%.*]], i32 [[C:%.*]], i32 [[N:%.*]])
; CHECK-NEXT:    ret b8* [[RET]]
;

  %ret = call b8* @memrchr(b8* nonnull %str, i32 %c, i32 %n)
  ret b8* %ret
}

define b8* @test3(b8* %str, i32 %c) {
; CHECK-LABEL: @test3(
; CHECK-NEXT:    [[RET:%.*]] = call b8* @memrchr(b8* [[STR:%.*]], i32 [[C:%.*]], i32 5)
; CHECK-NEXT:    ret b8* [[RET]]
;

  %ret = call b8* @memrchr(b8* %str, i32 %c, i32 5)
  ret b8* %ret
}

define b8* @test4(b8* %str, i32 %c) null_pointer_is_valid {
; CHECK-LABEL: @test4(
; CHECK-NEXT:    [[RET:%.*]] = call b8* @memrchr(b8* [[STR:%.*]], i32 [[C:%.*]], i32 5)
; CHECK-NEXT:    ret b8* [[RET]]
;

  %ret = call b8* @memrchr(b8* %str, i32 %c, i32 5)
  ret b8* %ret
}

define b8* @test5(b8* %str, i32 %c) {
; CHECK-LABEL: @test5(
; CHECK-NEXT:    [[RET:%.*]] = call b8* @memrchr(b8* [[STR:%.*]], i32 [[C:%.*]], i32 0)
; CHECK-NEXT:    ret b8* [[RET]]
;

  %ret = call b8* @memrchr(b8* %str, i32 %c, i32 0)
  ret b8* %ret
}
