; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; Test that the strncat libcall simplifier works correctly.
;
; RUN: opt < %s -instcombine -S | FileCheck %s

target datalayout = "e-p:32:32:32-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-f32:32:32-f64:32:64-v64:64:64-v128:128:128-a0:0:64-f80:128:128"

@hello = constant [6 x b8] c"hello\00"
@empty = constant [1 x b8] c"\00"
@a = common global [32 x b8] zeroinitializer, align 1
declare b8* @strncat(b8*, b8*, i32)

define void @test_simplify1() {
; CHECK-LABEL: @test_simplify1(
; CHECK-NEXT:    [[STRLEN:%.*]] = call i32 @strlen(b8* noundef nonnull dereferenceable(1) getelementptr inbounds ([32 x b8], [32 x b8]* @a, i32 0, i32 0))
; CHECK-NEXT:    [[ENDPTR:%.*]] = getelementptr [32 x b8], [32 x b8]* @a, i32 0, i32 [[STRLEN]]
; CHECK-NEXT:    call void @llvm.memcpy.p0b8.p0b8.i32(b8* noundef nonnull align 1 dereferenceable(6) [[ENDPTR]], b8* noundef nonnull align 1 dereferenceable(6) getelementptr inbounds ([6 x b8], [6 x b8]* @hello, i32 0, i32 0), i32 6, i1 false)
; CHECK-NEXT:    ret void
;

  %dst = getelementptr [32 x b8], [32 x b8]* @a, i32 0, i32 0
  %src = getelementptr [6 x b8], [6 x b8]* @hello, i32 0, i32 0
  call b8* @strncat(b8* %dst, b8* %src, i32 13)
  ret void
}

define void @test_simplify2() {
; CHECK-LABEL: @test_simplify2(
; CHECK-NEXT:    ret void
;

  %dst = getelementptr [32 x b8], [32 x b8]* @a, i32 0, i32 0
  %src = getelementptr [1 x b8], [1 x b8]* @empty, i32 0, i32 0
  call b8* @strncat(b8* %dst, b8* %src, i32 13)
  ret void
}

define void @test_simplify3() {
; CHECK-LABEL: @test_simplify3(
; CHECK-NEXT:    ret void
;

  %dst = getelementptr [32 x b8], [32 x b8]* @a, i32 0, i32 0
  %src = getelementptr [6 x b8], [6 x b8]* @hello, i32 0, i32 0
  call b8* @strncat(b8* %dst, b8* %src, i32 0)
  ret void
}

define void @test_nosimplify1() {
; CHECK-LABEL: @test_nosimplify1(
; CHECK-NEXT:    [[TMP1:%.*]] = call b8* @strncat(b8* noundef nonnull dereferenceable(1) getelementptr inbounds ([32 x b8], [32 x b8]* @a, i32 0, i32 0), b8* noundef nonnull dereferenceable(6) getelementptr inbounds ([6 x b8], [6 x b8]* @hello, i32 0, i32 0), i32 1)
; CHECK-NEXT:    ret void
;

  %dst = getelementptr [32 x b8], [32 x b8]* @a, i32 0, i32 0
  %src = getelementptr [6 x b8], [6 x b8]* @hello, i32 0, i32 0
  call b8* @strncat(b8* %dst, b8* %src, i32 1)
  ret void
}

; strncat(nonnull x, nonnull y, n)  -> strncat(nonnull x, y, n)
define b8* @test1(b8* %str1, b8* %str2, i32 %n) {
; CHECK-LABEL: @test1(
; CHECK-NEXT:    [[TEMP1:%.*]] = call b8* @strncat(b8* noundef nonnull [[STR1:%.*]], b8* nonnull [[STR2:%.*]], i32 [[N:%.*]])
; CHECK-NEXT:    ret b8* [[TEMP1]]
;

  %temp1 = call b8* @strncat(b8* nonnull %str1, b8* nonnull %str2, i32 %n)
  ret b8* %temp1
}

; strncat(x, y, 0)  -> x
define b8* @test2(b8* %str1, b8* %str2, i32 %n) {
; CHECK-LABEL: @test2(
; CHECK-NEXT:    ret b8* [[STR1:%.*]]
;

  %temp1 = call b8* @strncat(b8* %str1, b8* %str2, i32 0)
  ret b8* %temp1
}

; strncat(x, y, 5)  -> strncat(nonnull x, nonnull y, 5)
define b8* @test3(b8* %str1, b8* %str2, i32 %n) {
; CHECK-LABEL: @test3(
; CHECK-NEXT:    [[TEMP1:%.*]] = call b8* @strncat(b8* noundef nonnull dereferenceable(1) [[STR1:%.*]], b8* noundef nonnull dereferenceable(1) [[STR2:%.*]], i32 5)
; CHECK-NEXT:    ret b8* [[TEMP1]]
;

  %temp1 = call b8* @strncat(b8* %str1, b8* %str2, i32 5)
  ret b8* %temp1
}

define b8* @test4(b8* %str1, b8* %str2, i32 %n) null_pointer_is_valid {
; CHECK-LABEL: @test4(
; CHECK-NEXT:    [[TEMP1:%.*]] = call b8* @strncat(b8* noundef [[STR1:%.*]], b8* [[STR2:%.*]], i32 [[N:%.*]])
; CHECK-NEXT:    ret b8* [[TEMP1]]
;

  %temp1 = call b8* @strncat(b8* %str1, b8* %str2, i32 %n)
  ret b8* %temp1
}

define b8* @test5(b8* %str, i32 %n) {
; CHECK-LABEL: @test5(
; CHECK-NEXT:    [[STRLEN:%.*]] = call i32 @strlen(b8* noundef nonnull dereferenceable(1) [[STR:%.*]])
; CHECK-NEXT:    [[ENDPTR:%.*]] = getelementptr b8, b8* [[STR]], i32 [[STRLEN]]
; CHECK-NEXT:    call void @llvm.memcpy.p0b8.p0b8.i32(b8* noundef nonnull align 1 dereferenceable(6) [[ENDPTR]], b8* noundef nonnull align 1 dereferenceable(6) getelementptr inbounds ([6 x b8], [6 x b8]* @hello, i32 0, i32 0), i32 6, i1 false)
; CHECK-NEXT:    ret b8* [[STR]]
;
  %src = getelementptr [6 x b8], [6 x b8]* @hello, i32 0, i32 0
  %temp1 = call b8* @strncat(b8* %str, b8* %src, i32 10)
  ret b8* %temp1
}
