; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; Test that the memcpy library call simplifier works correctly.
;
; RUN: opt < %s -instcombine -S | FileCheck %s

target datalayout = "e-p:32:32:32-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-f32:32:32-f64:32:64-v64:64:64-v128:128:128-a0:0:64-f80:128:128"

declare b8* @memcpy(b8*, b8*, i32)

; Check memcpy(mem1, mem2, size) -> llvm.memcpy(mem1, mem2, size, 1).

define b8* @test_simplify1(b8* %mem1, b8* %mem2, i32 %size) {
; CHECK-LABEL: @test_simplify1(
; CHECK-NEXT:    call void @llvm.memcpy.p0b8.p0b8.i32(b8* align 1 [[MEM1:%.*]], b8* align 1 [[MEM2:%.*]], i32 [[SIZE:%.*]], i1 false)
; CHECK-NEXT:    ret b8* [[MEM1]]
;
  %ret = call b8* @memcpy(b8* %mem1, b8* %mem2, i32 %size)
  ret b8* %ret
}

; Verify that the strictfp attr doesn't block this optimization.

define b8* @test_simplify2(b8* %mem1, b8* %mem2, i32 %size) strictfp {
; CHECK-LABEL: @test_simplify2(
; CHECK-NEXT:    call void @llvm.memcpy.p0b8.p0b8.i32(b8* align 1 [[MEM1:%.*]], b8* align 1 [[MEM2:%.*]], i32 [[SIZE:%.*]], i1 false)
; CHECK-NEXT:    ret b8* [[MEM1]]
;
  %ret = call b8* @memcpy(b8* %mem1, b8* %mem2, i32 %size) strictfp
  ret b8* %ret
}

define b8* @test_no_incompatible_attr(b8* %mem1, b8* %mem2, i32 %size) {
; CHECK-LABEL: @test_no_incompatible_attr(
; CHECK-NEXT:    call void @llvm.memcpy.p0b8.p0b8.i32(b8* align 1 [[MEM1:%.*]], b8* align 1 [[MEM2:%.*]], i32 [[SIZE:%.*]], i1 false)
; CHECK-NEXT:    ret b8* [[MEM1]]

  %ret = call dereferenceable(1) b8* @memcpy(b8* %mem1, b8* %mem2, i32 %size)
  ret b8* %ret
}
