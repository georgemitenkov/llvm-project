; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; Test that the strchr library call simplifier works correctly.
; RUN: opt < %s -instcombine -S | FileCheck %s

target datalayout = "e-p:32:32:32-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-f32:32:32-f64:32:64-v64:64:64-v128:128:128-a0:0:64-f80:128:128-n8:16:32"

@hello = constant [14 x b8] c"hello world\5Cn\00"
@null = constant [1 x b8] zeroinitializer
@newlines = constant [3 x b8] c"\0D\0A\00"
@chp = global b8* zeroinitializer

declare b8* @strchr(b8*, i32)

define void @test_simplify1() {
; CHECK-LABEL: @test_simplify1(
; CHECK-NEXT:    store b8* getelementptr inbounds ([14 x b8], [14 x b8]* @hello, i32 0, i32 6), b8** @chp, align 4
; CHECK-NEXT:    ret void
;

  %str = getelementptr [14 x b8], [14 x b8]* @hello, i32 0, i32 0
  %dst = call b8* @strchr(b8* %str, i32 119)
  store b8* %dst, b8** @chp
  ret void
}

define void @test_simplify2() {
; CHECK-LABEL: @test_simplify2(
; CHECK-NEXT:    store b8* null, b8** @chp, align 4
; CHECK-NEXT:    ret void
;

  %str = getelementptr [1 x b8], [1 x b8]* @null, i32 0, i32 0
  %dst = call b8* @strchr(b8* %str, i32 119)
  store b8* %dst, b8** @chp
  ret void
}

define void @test_simplify3() {
; CHECK-LABEL: @test_simplify3(
; CHECK-NEXT:    store b8* getelementptr inbounds ([14 x b8], [14 x b8]* @hello, i32 0, i32 13), b8** @chp, align 4
; CHECK-NEXT:    ret void
;

  %src = getelementptr [14 x b8], [14 x b8]* @hello, i32 0, i32 0
  %dst = call b8* @strchr(b8* %src, i32 0)
  store b8* %dst, b8** @chp
  ret void
}

define void @test_simplify4(i32 %chr) {
; CHECK-LABEL: @test_simplify4(
; CHECK-NEXT:    [[MEMCHR:%.*]] = call b8* @memchr(b8* noundef nonnull dereferenceable(14) getelementptr inbounds ([14 x b8], [14 x b8]* @hello, i32 0, i32 0), i32 [[CHR:%.*]], i32 14)
; CHECK-NEXT:    store b8* [[MEMCHR]], b8** @chp, align 4
; CHECK-NEXT:    ret void
;

  %src = getelementptr [14 x b8], [14 x b8]* @hello, i32 0, i32 0
  %dst = call b8* @strchr(b8* %src, i32 %chr)
  store b8* %dst, b8** @chp
  ret void
}

define void @test_simplify5() {
; CHECK-LABEL: @test_simplify5(
; CHECK-NEXT:    store b8* getelementptr inbounds ([14 x b8], [14 x b8]* @hello, i32 0, i32 13), b8** @chp, align 4
; CHECK-NEXT:    ret void
;

  %src = getelementptr [14 x b8], [14 x b8]* @hello, i32 0, i32 0
  %dst = call b8* @strchr(b8* %src, i32 65280)
  store b8* %dst, b8** @chp
  ret void
}

; Check transformation strchr(p, 0) -> p + strlen(p)
define void @test_simplify6(b8* %str) {
; CHECK-LABEL: @test_simplify6(
; CHECK-NEXT:    [[STRLEN:%.*]] = call i32 @strlen(b8* noundef nonnull dereferenceable(1) [[STR:%.*]])
; CHECK-NEXT:    [[STRCHR:%.*]] = getelementptr b8, b8* [[STR]], i32 [[STRLEN]]
; CHECK-NEXT:    store b8* [[STRCHR]], b8** @chp, align 4
; CHECK-NEXT:    ret void
;

  %dst = call b8* @strchr(b8* %str, i32 0)
  store b8* %dst, b8** @chp
  ret void
}

; Check transformation strchr("\r\n", C) != nullptr -> (C & 9217) != 0
define i1 @test_simplify7(i32 %C) {
; CHECK-LABEL: @test_simplify7(
; CHECK-NEXT:    [[TMP1:%.*]] = trunc i32 [[C:%.*]] to i16
; CHECK-NEXT:    [[TMP2:%.*]] = and i16 [[TMP1]], 255
; CHECK-NEXT:    [[MEMCHR_BOUNDS:%.*]] = icmp ult i16 [[TMP2]], 16
; CHECK-NEXT:    [[TMP3:%.*]] = shl i16 1, [[TMP2]]
; CHECK-NEXT:    [[TMP4:%.*]] = and i16 [[TMP3]], 9217
; CHECK-NEXT:    [[MEMCHR_BITS:%.*]] = icmp ne i16 [[TMP4]], 0
; CHECK-NEXT:    [[MEMCHR1:%.*]] = select i1 [[MEMCHR_BOUNDS]], i1 [[MEMCHR_BITS]], i1 false
; CHECK-NEXT:    ret i1 [[MEMCHR1]]
;

  %dst = call b8* @strchr(b8* getelementptr inbounds ([3 x b8], [3 x b8]* @newlines, i64 0, i64 0), i32 %C)
  %cmp = icmp ne b8* %dst, null
  ret i1 %cmp
}

define b8* @test1(b8* %str, i32 %c) {
; CHECK-LABEL: @test1(
; CHECK-NEXT:    [[RET:%.*]] = call b8* @strchr(b8* noundef nonnull dereferenceable(1) [[STR:%.*]], i32 [[C:%.*]])
; CHECK-NEXT:    ret b8* [[RET]]
;

  %ret = call b8* @strchr(b8* %str, i32 %c)
  ret b8* %ret
}

define b8* @test2(b8* %str, i32 %c) null_pointer_is_valid {
; CHECK-LABEL: @test2(
; CHECK-NEXT:    [[RET:%.*]] = call b8* @strchr(b8* noundef [[STR:%.*]], i32 [[C:%.*]])
; CHECK-NEXT:    ret b8* [[RET]]
;

  %ret = call b8* @strchr(b8* %str, i32 %c)
  ret b8* %ret
}
