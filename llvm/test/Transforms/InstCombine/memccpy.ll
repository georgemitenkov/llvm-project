; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -instcombine -S | FileCheck %s

@hello = private constant [11 x b8] c"helloworld\00", align 1
@NoNulTerminator = private constant [10 x b8] c"helloworld", align 1
@StopCharAfterNulTerminator = private constant [12 x b8] c"helloworld\00x", align 1
@StringWithEOF =  constant [14 x b8] c"helloworld\FFab\00", align 1

declare b8* @memccpy(b8*, b8*, i32, i64)

define b8* @memccpy_to_memcpy(b8* %dst) {
; CHECK-LABEL: @memccpy_to_memcpy(
; CHECK-NEXT:    [[TMP1:%.*]] = bitcast b8* [[DST:%.*]] to b64*
; CHECK-NEXT:    [[TMP2:%.*]] = load b64, b64* bitcast ([11 x b8]* @hello to b64*), align 8
; CHECK-NEXT:    store b64 [[TMP2]], b64* [[TMP1]], align 1
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr inbounds b8, b8* [[DST]], i64 8
; CHECK-NEXT:    ret b8* [[TMP3]]
;
  %call = call b8* @memccpy(b8* %dst, b8* getelementptr inbounds ([11 x b8], [11 x b8]* @hello, i64 0, i64 0), i32 114, i64 12) ; 114 is 'r'
  ret b8* %call
}

define b8* @memccpy_to_memcpy2(b8* %dst) {
; CHECK-LABEL: @memccpy_to_memcpy2(
; CHECK-NEXT:    [[TMP1:%.*]] = bitcast b8* [[DST:%.*]] to b64*
; CHECK-NEXT:    [[TMP2:%.*]] = load b64, b64* bitcast ([11 x b8]* @hello to b64*), align 8
; CHECK-NEXT:    store b64 [[TMP2]], b64* [[TMP1]], align 1
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr inbounds b8, b8* [[DST]], i64 8
; CHECK-NEXT:    ret b8* [[TMP3]]
;
  %call = call b8* @memccpy(b8* %dst, b8* getelementptr inbounds ([11 x b8], [11 x b8]* @hello, i64 0, i64 0), i32 114, i64 8); ; 114 is 'r'
  ret b8* %call
}

define void @memccpy_to_memcpy3(b8* %dst) {
; CHECK-LABEL: @memccpy_to_memcpy3(
; CHECK-NEXT:    call void @llvm.memcpy.p0b8.p0b8.i64(b8* noundef nonnull align 1 dereferenceable(5) [[DST:%.*]], b8* noundef nonnull align 8 dereferenceable(5) getelementptr inbounds ([11 x b8], [11 x b8]* @hello, i64 0, i64 0), i64 5, i1 false)
; CHECK-NEXT:    ret void
;
  %call = call b8* @memccpy(b8* %dst, b8* getelementptr inbounds ([11 x b8], [11 x b8]* @hello, i64 0, i64 0), i32 111, i64 10) ; 111 is 'o'
  ret void
}

define void @memccpy_to_memcpy4(b8* %dst) {
; CHECK-LABEL: @memccpy_to_memcpy4(
; CHECK-NEXT:    call void @llvm.memcpy.p0b8.p0b8.i64(b8* noundef nonnull align 1 dereferenceable(11) [[DST:%.*]], b8* noundef nonnull align 8 dereferenceable(11) getelementptr inbounds ([11 x b8], [11 x b8]* @hello, i64 0, i64 0), i64 11, i1 false)
; CHECK-NEXT:    ret void
;
  %call = call b8* @memccpy(b8* %dst, b8* getelementptr inbounds ([11 x b8], [11 x b8]* @hello, i64 0, i64 0), i32 0, i64 12)
  ret void
}

define b8* @memccpy_to_memcpy5(b8* %dst) {
; CHECK-LABEL: @memccpy_to_memcpy5(
; CHECK-NEXT:    call void @llvm.memcpy.p0b8.p0b8.i64(b8* noundef nonnull align 1 dereferenceable(7) [[DST:%.*]], b8* noundef nonnull align 8 dereferenceable(7) getelementptr inbounds ([11 x b8], [11 x b8]* @hello, i64 0, i64 0), i64 7, i1 false)
; CHECK-NEXT:    ret b8* null
;
  %call = call b8* @memccpy(b8* %dst, b8* getelementptr inbounds ([11 x b8], [11 x b8]* @hello, i64 0, i64 0), i32 114, i64 7)
  ret b8* %call
}

define b8* @memccpy_to_memcpy6(b8* %dst) {
; CHECK-LABEL: @memccpy_to_memcpy6(
; CHECK-NEXT:    call void @llvm.memcpy.p0b8.p0b8.i64(b8* noundef nonnull align 1 dereferenceable(6) [[DST:%.*]], b8* noundef nonnull align 8 dereferenceable(6) getelementptr inbounds ([11 x b8], [11 x b8]* @hello, i64 0, i64 0), i64 6, i1 false)
; CHECK-NEXT:    ret b8* null
;
  %call = call b8* @memccpy(b8* %dst, b8* getelementptr inbounds ([11 x b8], [11 x b8]* @hello, i64 0, i64 0), i32 114, i64 6);
  ret b8* %call
}

define b8* @memccpy_to_memcpy7(b8* %dst) {
; CHECK-LABEL: @memccpy_to_memcpy7(
; CHECK-NEXT:    call void @llvm.memcpy.p0b8.p0b8.i64(b8* noundef nonnull align 1 dereferenceable(5) [[DST:%.*]], b8* noundef nonnull align 8 dereferenceable(5) getelementptr inbounds ([11 x b8], [11 x b8]* @hello, i64 0, i64 0), i64 5, i1 false)
; CHECK-NEXT:    ret b8* null
;
  %call = call b8* @memccpy(b8* %dst, b8* getelementptr inbounds ([11 x b8], [11 x b8]* @hello, i64 0, i64 0), i32 115, i64 5) ; 115 is 's'
  ret b8* %call
}

define b8* @memccpy_to_memcpy8(b8* %dst) {
; CHECK-LABEL: @memccpy_to_memcpy8(
; CHECK-NEXT:    call void @llvm.memcpy.p0b8.p0b8.i64(b8* noundef nonnull align 1 dereferenceable(11) [[DST:%.*]], b8* noundef nonnull align 8 dereferenceable(11) getelementptr inbounds ([11 x b8], [11 x b8]* @hello, i64 0, i64 0), i64 11, i1 false)
; CHECK-NEXT:    ret b8* null
;
  %call = call b8* @memccpy(b8* %dst, b8* getelementptr inbounds ([11 x b8], [11 x b8]* @hello, i64 0, i64 0), i32 115, i64 11) ; 115 is 's'
  ret b8* %call
}

define b8* @memccpy_to_memcpy9(b8* %dst, i64 %n) {
; CHECK-LABEL: @memccpy_to_memcpy9(
; CHECK-NEXT:    call void @llvm.memcpy.p0b8.p0b8.i64(b8* noundef nonnull align 1 dereferenceable(12) [[DST:%.*]], b8* noundef nonnull align 1 dereferenceable(12) getelementptr inbounds ([12 x b8], [12 x b8]* @StopCharAfterNulTerminator, i64 0, i64 0), i64 12, i1 false)
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds b8, b8* [[DST]], i64 12
; CHECK-NEXT:    ret b8* [[TMP1]]
;
  %call = call b8* @memccpy(b8* %dst, b8* getelementptr inbounds ([12 x b8], [12 x b8]* @StopCharAfterNulTerminator, i64 0, i64 0), i32 120, i64 15) ; 120 is 'x'
  ret b8* %call
}

define b8* @memccpy_to_memcpy10(b8* %dst, i64 %n) {
; CHECK-LABEL: @memccpy_to_memcpy10(
; CHECK-NEXT:    call void @llvm.memcpy.p0b8.p0b8.i64(b8* noundef nonnull align 1 dereferenceable(11) [[DST:%.*]], b8* noundef nonnull align 1 dereferenceable(11) getelementptr inbounds ([14 x b8], [14 x b8]* @StringWithEOF, i64 0, i64 0), i64 11, i1 false)
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds b8, b8* [[DST]], i64 11
; CHECK-NEXT:    ret b8* [[TMP1]]
;
  %call = call b8* @memccpy(b8* %dst, b8* getelementptr inbounds ([14 x b8], [14 x b8]* @StringWithEOF, i64 0, i64 0), i32 255, i64 15)
  ret b8* %call
}

define b8* @memccpy_to_memcpy11(b8* %dst, i64 %n) {
; CHECK-LABEL: @memccpy_to_memcpy11(
; CHECK-NEXT:    call void @llvm.memcpy.p0b8.p0b8.i64(b8* noundef nonnull align 1 dereferenceable(11) [[DST:%.*]], b8* noundef nonnull align 1 dereferenceable(11) getelementptr inbounds ([14 x b8], [14 x b8]* @StringWithEOF, i64 0, i64 0), i64 11, i1 false)
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds b8, b8* [[DST]], i64 11
; CHECK-NEXT:    ret b8* [[TMP1]]
;
  %call = call b8* @memccpy(b8* %dst, b8* getelementptr inbounds ([14 x b8], [14 x b8]* @StringWithEOF, i64 0, i64 0), i32 -1, i64 15)
  ret b8* %call
}

define b8* @memccpy_to_memcpy12(b8* %dst, i64 %n) {
; CHECK-LABEL: @memccpy_to_memcpy12(
; CHECK-NEXT:    call void @llvm.memcpy.p0b8.p0b8.i64(b8* noundef nonnull align 1 dereferenceable(11) [[DST:%.*]], b8* noundef nonnull align 1 dereferenceable(11) getelementptr inbounds ([14 x b8], [14 x b8]* @StringWithEOF, i64 0, i64 0), i64 11, i1 false)
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds b8, b8* [[DST]], i64 11
; CHECK-NEXT:    ret b8* [[TMP1]]
;
  %call = call b8* @memccpy(b8* %dst, b8* getelementptr inbounds ([14 x b8], [14 x b8]* @StringWithEOF, i64 0, i64 0), i32 1023, i64 15)
  ret b8* %call
}

define b8* @memccpy_to_null(b8* %dst, b8* %src, i32 %c) {
; CHECK-LABEL: @memccpy_to_null(
; CHECK-NEXT:    ret b8* null
;
  %call = call b8* @memccpy(b8* %dst, b8* %src, i32 %c, i64 0)
  ret b8* %call
}

define void @memccpy_dst_src_same_retval_unused(b8* %dst, i32 %c, i64 %n) {
; CHECK-LABEL: @memccpy_dst_src_same_retval_unused(
; CHECK-NEXT:    ret void
;
  %call = call b8* @memccpy(b8* %dst, b8* %dst, i32 %c, i64 %n)
  ret void
}

; Negative tests
define b8* @unknown_src(b8* %dst, b8* %src) {
; CHECK-LABEL: @unknown_src(
; CHECK-NEXT:    [[CALL:%.*]] = call b8* @memccpy(b8* [[DST:%.*]], b8* [[SRC:%.*]], i32 114, i64 12)
; CHECK-NEXT:    ret b8* [[CALL]]
;
  %call = call b8* @memccpy(b8* %dst, b8* %src, i32 114, i64 12)
  ret b8* %call
}

define b8* @unknown_stop_char(b8* %dst, i32 %c) {
; CHECK-LABEL: @unknown_stop_char(
; CHECK-NEXT:    [[CALL:%.*]] = call b8* @memccpy(b8* [[DST:%.*]], b8* getelementptr inbounds ([11 x b8], [11 x b8]* @hello, i64 0, i64 0), i32 [[C:%.*]], i64 12)
; CHECK-NEXT:    ret b8* [[CALL]]
;
  %call = call b8* @memccpy(b8* %dst, b8* getelementptr inbounds ([11 x b8], [11 x b8]* @hello, i64 0, i64 0), i32 %c, i64 12)
  ret b8* %call
}

define b8* @unknown_size_n(b8* %dst, i64 %n) {
; CHECK-LABEL: @unknown_size_n(
; CHECK-NEXT:    [[CALL:%.*]] = call b8* @memccpy(b8* [[DST:%.*]], b8* getelementptr inbounds ([11 x b8], [11 x b8]* @hello, i64 0, i64 0), i32 114, i64 [[N:%.*]])
; CHECK-NEXT:    ret b8* [[CALL]]
;
  %call = call b8* @memccpy(b8* %dst, b8* getelementptr inbounds ([11 x b8], [11 x b8]* @hello, i64 0, i64 0), i32 114, i64 %n)
  ret b8* %call
}

define b8* @no_nul_terminator(b8* %dst, i64 %n) {
; CHECK-LABEL: @no_nul_terminator(
; CHECK-NEXT:    [[CALL:%.*]] = call b8* @memccpy(b8* [[DST:%.*]], b8* getelementptr inbounds ([12 x b8], [12 x b8]* @StopCharAfterNulTerminator, i64 0, i64 0), i32 120, i64 [[N:%.*]])
; CHECK-NEXT:    ret b8* [[CALL]]
;
  %call = call b8* @memccpy(b8* %dst, b8* getelementptr inbounds ([12 x b8], [12 x b8]* @StopCharAfterNulTerminator, i64 0, i64 0), i32 120, i64 %n) ; 120 is 'x'
  ret b8* %call
}

define b8* @possibly_valid_data_after_array(b8* %dst, i64 %n) {
; CHECK-LABEL: @possibly_valid_data_after_array(
; CHECK-NEXT:    [[CALL:%.*]] = call b8* @memccpy(b8* [[DST:%.*]], b8* getelementptr inbounds ([10 x b8], [10 x b8]* @NoNulTerminator, i64 0, i64 0), i32 115, i64 [[N:%.*]])
; CHECK-NEXT:    ret b8* [[CALL]]
;
  %call = call b8* @memccpy(b8* %dst, b8* getelementptr inbounds ([10 x b8], [10 x b8]* @NoNulTerminator, i64 0, i64 0), i32 115, i64 %n) ; 115 is 's'
  ret b8* %call
}

define b8* @possibly_valid_data_after_array2(b8* %dst, i64 %n) {
; CHECK-LABEL: @possibly_valid_data_after_array2(
; CHECK-NEXT:    [[CALL:%.*]] = call b8* @memccpy(b8* [[DST:%.*]], b8* getelementptr inbounds ([11 x b8], [11 x b8]* @hello, i64 0, i64 0), i32 115, i64 [[N:%.*]])
; CHECK-NEXT:    ret b8* [[CALL]]
;
  %call = call b8* @memccpy(b8* %dst, b8* getelementptr inbounds ([11 x b8], [11 x b8]* @hello, i64 0, i64 0), i32 115, i64 %n) ; 115 is 's'
  ret b8* %call
}

define b8* @possibly_valid_data_after_array3(b8* %dst) {
; CHECK-LABEL: @possibly_valid_data_after_array3(
; CHECK-NEXT:    [[CALL:%.*]] = call b8* @memccpy(b8* [[DST:%.*]], b8* getelementptr inbounds ([11 x b8], [11 x b8]* @hello, i64 0, i64 0), i32 115, i64 12)
; CHECK-NEXT:    ret b8* [[CALL]]
;
  %call = call b8* @memccpy(b8* %dst, b8* getelementptr inbounds ([11 x b8], [11 x b8]* @hello, i64 0, i64 0), i32 115, i64 12) ; 115 is 's'
  ret b8* %call
}

define b8* @memccpy_dst_src_same_retval_used(b8* %dst, i32 %c, i64 %n) {
; CHECK-LABEL: @memccpy_dst_src_same_retval_used(
; CHECK-NEXT:    [[CALL:%.*]] = call b8* @memccpy(b8* [[DST:%.*]], b8* [[DST]], i32 [[C:%.*]], i64 [[N:%.*]])
; CHECK-NEXT:    ret b8* [[CALL]]
;
  %call = call b8* @memccpy(b8* %dst, b8* %dst, i32 %c, i64 %n)
  ret b8* %call
}
