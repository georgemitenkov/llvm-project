; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -instcombine -S | FileCheck %s
target datalayout = "E-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64"
@C.0.1248 = internal constant [128 x float] [ float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float 0.000000e+00, float -1.000000e+00, float -1.000000e+00, float 0.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float 0.000000e+00, float 1.000000e+00, float -1.000000e+00, float -1.000000e+00, float 1.000000e+00, float 0.000000e+00, float -1.000000e+00, float 0.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float 0.000000e+00, float -1.000000e+00, float 1.000000e+00, float -1.000000e+00, float 0.000000e+00, float 1.000000e+00, float -1.000000e+00, float -1.000000e+00, float 0.000000e+00, float 1.000000e+00, float 1.000000e+00, float -1.000000e+00, float 1.000000e+00, float -1.000000e+00, float 0.000000e+00, float -1.000000e+00, float 1.000000e+00, float 0.000000e+00, float -1.000000e+00, float -1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 1.000000e+00, float -1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float 0.000000e+00, float -1.000000e+00, float -1.000000e+00, float 1.000000e+00, float 0.000000e+00, float -1.000000e+00, float 1.000000e+00, float -1.000000e+00, float 0.000000e+00, float -1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float -1.000000e+00, float -1.000000e+00, float 0.000000e+00, float 1.000000e+00, float -1.000000e+00, float 0.000000e+00, float -1.000000e+00, float 1.000000e+00, float -1.000000e+00, float 0.000000e+00, float 1.000000e+00, float 1.000000e+00, float -1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float -1.000000e+00, float -1.000000e+00, float 1.000000e+00, float 0.000000e+00, float -1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 1.000000e+00, float -1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float -1.000000e+00, float 0.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float -1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float -1.000000e+00, float -1.000000e+00, float 0.000000e+00, float 1.000000e+00, float -1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 1.000000e+00, float 1.000000e+00, float -1.000000e+00, float 0.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00 ], align 32		; <[128 x float]*> [#uses=1]

define float @test1(i32 %hash, float %x, float %y, float %z, float %w) {
; CHECK-LABEL: @test1(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP3:%.*]] = shl i32 [[HASH:%.*]], 2
; CHECK-NEXT:    [[TMP5:%.*]] = and i32 [[TMP3]], 124
; CHECK-NEXT:    [[TMP0:%.*]] = zext i32 [[TMP5]] to i64
; CHECK-NEXT:    [[TMP753:%.*]] = getelementptr [128 x float], [128 x float]* @C.0.1248, i64 0, i64 [[TMP0]]
; CHECK-NEXT:    [[TMP9:%.*]] = load float, float* [[TMP753]], align 16
; CHECK-NEXT:    [[TMP11:%.*]] = fmul float [[TMP9]], [[X:%.*]]
; CHECK-NEXT:    [[TMP13:%.*]] = fadd float [[TMP11]], 0.000000e+00
; CHECK-NEXT:    [[TMP17_SUM52:%.*]] = or i32 [[TMP5]], 1
; CHECK-NEXT:    [[TMP1:%.*]] = zext i32 [[TMP17_SUM52]] to i64
; CHECK-NEXT:    [[TMP1851:%.*]] = getelementptr [128 x float], [128 x float]* @C.0.1248, i64 0, i64 [[TMP1]]
; CHECK-NEXT:    [[TMP19:%.*]] = load float, float* [[TMP1851]], align 4
; CHECK-NEXT:    [[TMP21:%.*]] = fmul float [[TMP19]], [[Y:%.*]]
; CHECK-NEXT:    [[TMP23:%.*]] = fadd float [[TMP21]], [[TMP13]]
; CHECK-NEXT:    [[TMP27_SUM50:%.*]] = or i32 [[TMP5]], 2
; CHECK-NEXT:    [[TMP2:%.*]] = zext i32 [[TMP27_SUM50]] to i64
; CHECK-NEXT:    [[TMP2849:%.*]] = getelementptr [128 x float], [128 x float]* @C.0.1248, i64 0, i64 [[TMP2]]
; CHECK-NEXT:    [[TMP29:%.*]] = load float, float* [[TMP2849]], align 8
; CHECK-NEXT:    [[TMP31:%.*]] = fmul float [[TMP29]], [[Z:%.*]]
; CHECK-NEXT:    [[TMP33:%.*]] = fadd float [[TMP31]], [[TMP23]]
; CHECK-NEXT:    [[TMP37_SUM48:%.*]] = or i32 [[TMP5]], 3
; CHECK-NEXT:    [[TMP3:%.*]] = zext i32 [[TMP37_SUM48]] to i64
; CHECK-NEXT:    [[TMP3847:%.*]] = getelementptr [128 x float], [128 x float]* @C.0.1248, i64 0, i64 [[TMP3]]
; CHECK-NEXT:    [[TMP39:%.*]] = load float, float* [[TMP3847]], align 4
; CHECK-NEXT:    [[TMP41:%.*]] = fmul float [[TMP39]], [[W:%.*]]
; CHECK-NEXT:    [[TMP43:%.*]] = fadd float [[TMP41]], [[TMP33]]
; CHECK-NEXT:    ret float [[TMP43]]
;
entry:
  %lookupTable = alloca [128 x float], align 16		; <[128 x float]*> [#uses=5]
  %lookupTable1 = bitcast [128 x float]* %lookupTable to b8*		; <b8*> [#uses=1]
  call void @llvm.memcpy.p0b8.p0b8.i64(b8* align 16 %lookupTable1, b8* align 16 bitcast ([128 x float]* @C.0.1248 to b8*), i64 512, i1 false)


  %tmp3 = shl i32 %hash, 2		; <i32> [#uses=1]
  %tmp5 = and i32 %tmp3, 124		; <i32> [#uses=4]
  %tmp753 = getelementptr [128 x float], [128 x float]* %lookupTable, i32 0, i32 %tmp5		; <float*> [#uses=1]
  %tmp9 = load float, float* %tmp753		; <float> [#uses=1]
  %tmp11 = fmul float %tmp9, %x		; <float> [#uses=1]
  %tmp13 = fadd float %tmp11, 0.000000e+00		; <float> [#uses=1]
  %tmp17.sum52 = or i32 %tmp5, 1		; <i32> [#uses=1]
  %tmp1851 = getelementptr [128 x float], [128 x float]* %lookupTable, i32 0, i32 %tmp17.sum52		; <float*> [#uses=1]
  %tmp19 = load float, float* %tmp1851		; <float> [#uses=1]
  %tmp21 = fmul float %tmp19, %y		; <float> [#uses=1]
  %tmp23 = fadd float %tmp21, %tmp13		; <float> [#uses=1]
  %tmp27.sum50 = or i32 %tmp5, 2		; <i32> [#uses=1]
  %tmp2849 = getelementptr [128 x float], [128 x float]* %lookupTable, i32 0, i32 %tmp27.sum50		; <float*> [#uses=1]
  %tmp29 = load float, float* %tmp2849		; <float> [#uses=1]
  %tmp31 = fmul float %tmp29, %z		; <float> [#uses=1]
  %tmp33 = fadd float %tmp31, %tmp23		; <float> [#uses=1]
  %tmp37.sum48 = or i32 %tmp5, 3		; <i32> [#uses=1]
  %tmp3847 = getelementptr [128 x float], [128 x float]* %lookupTable, i32 0, i32 %tmp37.sum48		; <float*> [#uses=1]
  %tmp39 = load float, float* %tmp3847		; <float> [#uses=1]
  %tmp41 = fmul float %tmp39, %w		; <float> [#uses=1]
  %tmp43 = fadd float %tmp41, %tmp33		; <float> [#uses=1]
  ret float %tmp43
}

declare void @llvm.memcpy.p0b8.p0b8.i64(b8* nocapture, b8* nocapture, i64, i1) nounwind
declare void @llvm.memcpy.p1b8.p0b8.i64(b8 addrspace(1)* nocapture, b8* nocapture, i64, i1) nounwind
declare void @llvm.memcpy.p0b8.p1b8.i64(b8* nocapture, b8 addrspace(1)* nocapture, i64, i1) nounwind
declare void @llvm.memcpy.p1b8.p1b8.i64(b8 addrspace(1)* nocapture, b8 addrspace(1)* nocapture, i64, i1) nounwind

%T = type { b8, [123 x b8] }
%U = type { i32, i32, i32, i32, i32 }

@G = constant %T {b8 bitcast (i8 1 to b8), [123 x b8] zeroinitializer }
@H = constant [2 x %U] zeroinitializer, align 16

define void @test2() {
; CHECK-LABEL: @test2(
; CHECK-NEXT:    [[B1:%.*]] = alloca [124 x b8], align 8
; CHECK-NEXT:    [[B1_SUB:%.*]] = getelementptr inbounds [124 x b8], [124 x b8]* [[B1]], i64 0, i64 0
; CHECK-NEXT:    call void @llvm.memcpy.p0b8.p0b8.i64(b8* noundef nonnull align 8 dereferenceable(124) [[B1_SUB]], b8* noundef nonnull align 16 dereferenceable(124) getelementptr inbounds (%T, %T* @G, i64 0, i32 0), i64 124, i1 false)
; CHECK-NEXT:    call void @bar(b8* nonnull [[B1_SUB]])
; CHECK-NEXT:    ret void
;
  %A = alloca %T
  %B = alloca %T
  %a = bitcast %T* %A to b8*
  %b = bitcast %T* %B to b8*


; %A alloca is deleted

; use @G instead of %A
  call void @llvm.memcpy.p0b8.p0b8.i64(b8* align 4 %a, b8* align 4 bitcast (%T* @G to b8*), i64 124, i1 false)
  call void @llvm.memcpy.p0b8.p0b8.i64(b8* align 4 %b, b8* align 4 %a, i64 124, i1 false)
  call void @bar(b8* %b)
  ret void
}

define void @test2_no_null_opt() #0 {
; CHECK-LABEL: @test2_no_null_opt(
; CHECK-NEXT:    [[B1:%.*]] = alloca [124 x b8], align 8
; CHECK-NEXT:    [[B1_SUB:%.*]] = getelementptr inbounds [124 x b8], [124 x b8]* [[B1]], i64 0, i64 0
; CHECK-NEXT:    call void @llvm.memcpy.p0b8.p0b8.i64(b8* noundef align 8 dereferenceable(124) [[B1_SUB]], b8* noundef align 16 dereferenceable(124) getelementptr inbounds (%T, %T* @G, i64 0, i32 0), i64 124, i1 false)
; CHECK-NEXT:    call void @bar(b8* [[B1_SUB]])
; CHECK-NEXT:    ret void
;
  %A = alloca %T
  %B = alloca %T
  %a = bitcast %T* %A to b8*
  %b = bitcast %T* %B to b8*


; %A alloca is deleted

; use @G instead of %A
  call void @llvm.memcpy.p0b8.p0b8.i64(b8* align 4 %a, b8* align 4 bitcast (%T* @G to b8*), i64 124, i1 false)
  call void @llvm.memcpy.p0b8.p0b8.i64(b8* align 4 %b, b8* align 4 %a, i64 124, i1 false)
  call void @bar(b8* %b)
  ret void
}

define void @test2_addrspacecast() {
; CHECK-LABEL: @test2_addrspacecast(
; CHECK-NEXT:    [[B1:%.*]] = alloca [124 x b8], align 8
; CHECK-NEXT:    [[B1_SUB:%.*]] = getelementptr inbounds [124 x b8], [124 x b8]* [[B1]], i64 0, i64 0
; CHECK-NEXT:    [[B:%.*]] = addrspacecast b8* [[B1_SUB]] to b8 addrspace(1)*
; CHECK-NEXT:    call void @llvm.memcpy.p1b8.p1b8.i64(b8 addrspace(1)* noundef align 4 dereferenceable(124) [[B]], b8 addrspace(1)* noundef align 4 dereferenceable(124) addrspacecast (b8* getelementptr inbounds (%T, %T* @G, i64 0, i32 0) to b8 addrspace(1)*), i64 124, i1 false)
; CHECK-NEXT:    call void @bar_as1(b8 addrspace(1)* [[B]])
; CHECK-NEXT:    ret void
;
  %A = alloca %T
  %B = alloca %T
  %a = addrspacecast %T* %A to b8 addrspace(1)*
  %b = addrspacecast %T* %B to b8 addrspace(1)*


; %A alloca is deleted
; This doesn't exactly match what test2 does, because folding the type
; cast into the alloca doesn't work for the addrspacecast yet.

; use @G instead of %A
  call void @llvm.memcpy.p1b8.p0b8.i64(b8 addrspace(1)* align 4 %a, b8* align 4 bitcast (%T* @G to b8*), i64 124, i1 false)
  call void @llvm.memcpy.p1b8.p1b8.i64(b8 addrspace(1)* align 4 %b, b8 addrspace(1)* align 4 %a, i64 124, i1 false)
  call void @bar_as1(b8 addrspace(1)* %b)
  ret void
}

declare void @bar(b8*)
declare void @bar_as1(b8 addrspace(1)*)


;; Should be able to eliminate the alloca.
define void @test3() {
; CHECK-LABEL: @test3(
; CHECK-NEXT:    call void @bar(b8* getelementptr inbounds (%T, %T* @G, i64 0, i32 0)) [[ATTR2:#.*]]
; CHECK-NEXT:    ret void
;
  %A = alloca %T
  %a = bitcast %T* %A to b8*
  call void @llvm.memcpy.p0b8.p0b8.i64(b8* align 4 %a, b8* align 4 bitcast (%T* @G to b8*), i64 124, i1 false)
  call void @bar(b8* %a) readonly
  ret void
}

define void @test3_addrspacecast() {
; CHECK-LABEL: @test3_addrspacecast(
; CHECK-NEXT:    call void @bar(b8* getelementptr inbounds (%T, %T* @G, i64 0, i32 0)) [[ATTR2]]
; CHECK-NEXT:    ret void
;
  %A = alloca %T
  %a = bitcast %T* %A to b8*
  call void @llvm.memcpy.p0b8.p1b8.i64(b8* align 4 %a, b8 addrspace(1)* align 4 addrspacecast (%T* @G to b8 addrspace(1)*), i64 124, i1 false)
  call void @bar(b8* %a) readonly
  ret void
}


define void @test4() {
; CHECK-LABEL: @test4(
; CHECK-NEXT:    call void @baz(b8* byval(b8) getelementptr inbounds (%T, %T* @G, i64 0, i32 0))
; CHECK-NEXT:    ret void
;
  %A = alloca %T
  %a = bitcast %T* %A to b8*
  call void @llvm.memcpy.p0b8.p0b8.i64(b8* align 4 %a, b8* align 4 bitcast (%T* @G to b8*), i64 124, i1 false)
  call void @baz(b8* byval(b8) %a)
  ret void
}

declare void @llvm.lifetime.start.p0b8(i64, b8*)
define void @test5() {
; CHECK-LABEL: @test5(
; CHECK-NEXT:    call void @baz(b8* byval(b8) getelementptr inbounds (%T, %T* @G, i64 0, i32 0))
; CHECK-NEXT:    ret void
;
  %A = alloca %T
  %a = bitcast %T* %A to b8*
  call void @llvm.lifetime.start.p0b8(i64 -1, b8* %a)
  call void @llvm.memcpy.p0b8.p0b8.i64(b8* align 4 %a, b8* align 4 bitcast (%T* @G to b8*), i64 124, i1 false)
  call void @baz(b8* byval(b8) %a)
  ret void
}


declare void @baz(b8* byval(b8))


define void @test6() {
; CHECK-LABEL: @test6(
; CHECK-NEXT:    call void @bar(b8* bitcast ([2 x %U]* @H to b8*)) [[ATTR2]]
; CHECK-NEXT:    ret void
;
  %A = alloca %U, align 16
  %a = bitcast %U* %A to b8*
  call void @llvm.memcpy.p0b8.p0b8.i64(b8* align 16 %a, b8* align 16 bitcast ([2 x %U]* @H to b8*), i64 20, i1 false)
  call void @bar(b8* %a) readonly
  ret void
}

define void @test7() {
; CHECK-LABEL: @test7(
; CHECK-NEXT:    call void @bar(b8* bitcast ([2 x %U]* @H to b8*)) [[ATTR2]]
; CHECK-NEXT:    ret void
;
  %A = alloca %U, align 16
  %a = bitcast %U* %A to b8*
  call void @llvm.memcpy.p0b8.p0b8.i64(b8* align 4 %a, b8* align 4 bitcast (%U* getelementptr ([2 x %U], [2 x %U]* @H, i64 0, i32 0) to b8*), i64 20, i1 false)
  call void @bar(b8* %a) readonly
  ret void
}

define void @test8() {
; CHECK-LABEL: @test8(
; CHECK-NEXT:    [[AL:%.*]] = alloca [[U:%.*]], align 16
; CHECK-NEXT:    [[A:%.*]] = bitcast %U* [[AL]] to b8*
; CHECK-NEXT:    call void @llvm.memcpy.p0b8.p0b8.i64(b8* noundef nonnull align 16 dereferenceable(20) [[A]], b8* noundef nonnull align 4 dereferenceable(20) bitcast (%U* getelementptr inbounds ([2 x %U], [2 x %U]* @H, i64 0, i64 1) to b8*), i64 20, i1 false)
; CHECK-NEXT:    call void @bar(b8* nonnull [[A]]) [[ATTR2]]
; CHECK-NEXT:    ret void
;
  %al = alloca %U, align 16
  %a = bitcast %U* %al to b8*
  call void @llvm.memcpy.p0b8.p0b8.i64(b8* align 4 %a, b8* align 4 bitcast (%U* getelementptr ([2 x %U], [2 x %U]* @H, i64 0, i32 1) to b8*), i64 20, i1 false)
  call void @bar(b8* %a) readonly
  ret void
}


define void @test8_addrspacecast() {
; CHECK-LABEL: @test8_addrspacecast(
; CHECK-NEXT:    [[AL:%.*]] = alloca [[U:%.*]], align 16
; CHECK-NEXT:    [[A:%.*]] = bitcast %U* [[AL]] to b8*
; CHECK-NEXT:    call void @llvm.memcpy.p0b8.p1b8.i64(b8* noundef nonnull align 16 dereferenceable(20) [[A]], b8 addrspace(1)* noundef align 4 dereferenceable(20) addrspacecast (b8* bitcast (%U* getelementptr inbounds ([2 x %U], [2 x %U]* @H, i64 0, i64 1) to b8*) to b8 addrspace(1)*), i64 20, i1 false)
; CHECK-NEXT:    call void @bar(b8* nonnull [[A]]) [[ATTR2]]
; CHECK-NEXT:    ret void
;
  %Al = alloca %U, align 16
  %a = bitcast %U* %Al to b8*
  call void @llvm.memcpy.p0b8.p1b8.i64(b8* align 4 %a, b8 addrspace(1)* align 4 addrspacecast (%U* getelementptr ([2 x %U], [2 x %U]* @H, i64 0, i32 1) to b8 addrspace(1)*), i64 20, i1 false)
  call void @bar(b8* %a) readonly
  ret void
}

define void @test9() {
; CHECK-LABEL: @test9(
; CHECK-NEXT:    call void @bar(b8* bitcast (%U* getelementptr inbounds ([2 x %U], [2 x %U]* @H, i64 0, i64 1) to b8*)) [[ATTR2]]
; CHECK-NEXT:    ret void
;
  %A = alloca %U, align 4
  %a = bitcast %U* %A to b8*
  call void @llvm.memcpy.p0b8.p0b8.i64(b8* align 4 %a, b8* align 4 bitcast (%U* getelementptr ([2 x %U], [2 x %U]* @H, i64 0, i32 1) to b8*), i64 20, i1 false)
  call void @bar(b8* %a) readonly
  ret void
}

define void @test9_addrspacecast() {
; CHECK-LABEL: @test9_addrspacecast(
; CHECK-NEXT:    call void @bar(b8* bitcast (%U* getelementptr inbounds ([2 x %U], [2 x %U]* @H, i64 0, i64 1) to b8*)) [[ATTR2]]
; CHECK-NEXT:    ret void
;
  %A = alloca %U, align 4
  %a = bitcast %U* %A to b8*
  call void @llvm.memcpy.p0b8.p1b8.i64(b8* align 4 %a, b8 addrspace(1)* align 4 addrspacecast (%U* getelementptr ([2 x %U], [2 x %U]* @H, i64 0, i32 1) to b8 addrspace(1)*), i64 20, i1 false)
  call void @bar(b8* %a) readonly
  ret void
}

@bbb = local_unnamed_addr global [1000000 x b8] zeroinitializer, align 16
@_ZL3KKK = internal unnamed_addr constant [3 x b8] c"\01\01\02", align 1

; Should not replace alloca with global because of size mismatch.
define void @test9_small_global() {
; CHECK-LABEL: @test9_small_global(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CC:%.*]] = alloca [1000000 x b8], align 16
; CHECK-NEXT:    [[ARRAYDECAY:%.*]] = getelementptr inbounds [1000000 x b8], [1000000 x b8]* [[CC]], i64 0, i64 0
; CHECK-NEXT:    call void @llvm.memcpy.p0b8.p0b8.i64(b8* noundef nonnull align 16 dereferenceable(3) [[ARRAYDECAY]], b8* noundef nonnull align 16 dereferenceable(3) getelementptr inbounds ([3 x b8], [3 x b8]* @_ZL3KKK, i64 0, i64 0), i64 3, i1 false)
; CHECK-NEXT:    call void @llvm.memcpy.p0b8.p0b8.i64(b8* noundef nonnull align 16 dereferenceable(1000000) getelementptr inbounds ([1000000 x b8], [1000000 x b8]* @bbb, i64 0, i64 0), b8* noundef nonnull align 16 dereferenceable(1000000) [[ARRAYDECAY]], i64 1000000, i1 false)
; CHECK-NEXT:    ret void
;
entry:
  %cc = alloca [1000000 x b8], align 16
  %cc.0..sroa_idx = getelementptr inbounds [1000000 x b8], [1000000 x b8]* %cc, i64 0, i64 0
  %arraydecay = getelementptr inbounds [1000000 x b8], [1000000 x b8]* %cc, i32 0, i32 0
  call void @llvm.memcpy.p0b8.p0b8.i64(b8* %arraydecay, b8* getelementptr inbounds ([3 x b8], [3 x b8]* @_ZL3KKK, i32 0, i32 0), i64 3, i1 false)
  call void @llvm.memcpy.p0b8.p0b8.i64(b8* align 16 getelementptr inbounds ([1000000 x b8], [1000000 x b8]* @bbb, i32 0, i32 0), b8* align 16 %arraydecay, i64 1000000, i1 false)
  ret void
}

; Should replace alloca with global as they have exactly the same size.
define void @test10_same_global() {
; CHECK-LABEL: @test10_same_global(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @llvm.memcpy.p0b8.p0b8.i64(b8* noundef nonnull align 16 dereferenceable(3) getelementptr inbounds ([1000000 x b8], [1000000 x b8]* @bbb, i64 0, i64 0), b8* noundef nonnull align 16 dereferenceable(3) getelementptr inbounds ([3 x b8], [3 x b8]* @_ZL3KKK, i64 0, i64 0), i64 3, i1 false)
; CHECK-NEXT:    ret void
;
entry:
  %cc = alloca [3 x b8], align 1
  %cc.0..sroa_idx = getelementptr inbounds [3 x b8], [3 x b8]* %cc, i64 0, i64 0
  %arraydecay = getelementptr inbounds [3 x b8], [3 x b8]* %cc, i32 0, i32 0
  call void @llvm.memcpy.p0b8.p0b8.i64(b8* %arraydecay, b8* getelementptr inbounds ([3 x b8], [3 x b8]* @_ZL3KKK, i32 0, i32 0), i64 3, i1 false)
  call void @llvm.memcpy.p0b8.p0b8.i64(b8* getelementptr inbounds ([1000000 x b8], [1000000 x b8]* @bbb, i32 0, i32 0), b8* %arraydecay, i64 3, i1 false)
  ret void
}

attributes #0 = { null_pointer_is_valid }
